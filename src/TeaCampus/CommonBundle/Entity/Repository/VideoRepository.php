<?php

namespace TeaCampus\CommonBundle\Entity\Repository;

/**
 * VideoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VideoRepository extends \Doctrine\ORM\EntityRepository
{
   public function findPopular() {
 
        $query = $this->createQueryBuilder('v');
        $query->andWhere('v.enabled = true');
        $query->orderBy('v.date','DESC');
        $query->setMaxResults(5);
        
        return $query->getQuery()->getResult();
    }
    
    public function findChapterVideos($id) {
 
        $query = $this->createQueryBuilder('v');
        $query->innerJoin('v.category', 'c')
              ->where('v.enabled = true')
              ->andWhere('c.id = :id')
              ->setParameter('id', $id)
              ->orderBy('v.date','DESC');
        
        return $query->getQuery()->getResult();
    } 
    
    public function findSubjectVideos($id) {
 
        $query = $this->createQueryBuilder('v');
        $query->innerJoin('v.category', 'c')
              ->innerJoin('c.parent', 'cp')
              ->where('v.enabled = true')
              ->andWhere('cp.id = :id')
              ->setParameter('id', $id)
              ->orderBy('v.date','DESC');
        //$query->setMaxResults(5);
        
        return $query->getQuery()->getResult();
    } 
    
    public function findLast($limit=5) {
 
        $query = $this->createQueryBuilder('v');
        $query->where('v.enabled = true ');
        $query->orderBy('v.date','DESC');
        $query->setMaxResults($limit);
        
        return $query->getQuery()->getResult();
    }
    
    public function findByTag($tag)
    {
        $query = $this->createQueryBuilder('v');
        $query->join('v.tags', 't')
              ->where($query->expr()->in('t.id', $tag));
 
        return $query->getQuery()->getResult();
    }
    
    public function search($search, $limit = null)
    {
        $query = $this->createQueryBuilder('v');
        $query->where($query->expr()->like('v.title', ':search'))
              ->orWhere($query->expr()->like('v.description', ':search'))
              ->setParameter('search', '%'.$search.'%');
        if(!is_null($limit)){
            $query->setMaxResults($limit);
        }
 
        return $query->getQuery()->getResult();
    }
}
